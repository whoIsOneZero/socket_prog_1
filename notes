/* NOTES */

--> Server side functions
1. socket()
2. bind()
3. listen()
4. accept()
5. read()
6. write()
7. close()

--> Client side functions
1. socket()
2.
3.
4. connection()
5. write()
6. read()
7. close()

- Socket port number and type needs to be the same

/**
* socket - returns file descriptor (int) 
* @domain: specifies the address family - AF_INET (IPv4)
* @type: communication type. 2 types...
* ... SOCK_STREAM => TCP (This will be used)
* SOCK_DGRAM => UDP
* @protocol: 0 (default for TCP protocol)
*/
int sockfd = socket(int domain, int type, int protocol);


/**
* bind - assigns the address specified by @addr to the socket..
* .. referred by file descriptor @sockfd.
* socket initially exists in the name space, with no...
* ... address assigned to it.
*
* @sockfd: file descriptor from socket()
* @addr: pointer to the address
* @addrlen: specifies the size (bytes) of the address struct..
* .. pointed by @addr
* Return: 0 (SUCCESS) or -1 (FAILURE)
*/
int bind (int sockfd, const struct sockaddr *addr, socklen_t addrlen);


/**
* sockaddr - cast the struct pointer parsed in 'addr' to avoid..
* .. compiler warnings
*/
struct sockaddr 
{
    sa_family_t sa_family;
    char sa_data[14];
}

/**
* listen - listens for connections on a socket
* @sockfd: file descriptor
* @backlog: number of connections a system can handle a single time
*/
int listen(int sockfd, int backlog);

/**
* accepts - [description below]
* newsockfd file descriptor - used for all comm. that will take...
* ... place after listen()
*/

int newsockfd = accept(sockfd, (struct sockaddr *)&addr, &addrlen);

accept() - waits for connection() to be generated on the client side...
... and responds to it.

/**
* connect - 
* Return: 0 (SUCCESS) or -1 (FAILURE)
*/
int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);

/**
* read -
* @buffer: string (message) that'll be passed
* @buffer_size: string length
*/
int read(newsockfd, buffer, buffer_size);

/**
* write -
* @buffer: string (message) that'll be passed
* @buffer_size: string length
*/
int write(newsockfd, buffer, buffer_size);

close() - closes the connection